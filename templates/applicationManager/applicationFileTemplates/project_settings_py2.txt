# Django settings for WBDAP project.

import os
import mongoengine

from wbdap.custom_settings import *


# Site root url bilgisini verelim.
from django.conf.global_settings import AUTHENTICATION_BACKENDS

RESULTS_PER_PAGE = 10;
LOGIN_URL = '/login/'

SITE_ROOT = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

# Parameter that is showing the location of the fixtures
FIXTURE_DIRS = {
    os.path.join(SITE_ROOT, 'fixtures'),
}

# Bu uygulama icin vermek istediginiz isim ne ise buraya ekleyebilirsiniz
APPLICATION_NAME = 'wbdap'

DEBUG = True

SUB_MODEL_DIR = "sub_models"
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # insert your TEMPLATE_DIRS here
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': DEBUG,
            'context_processors': [
                # Insert your TEMPLATE_CONTEXT_PROCESSORS here or use this
                # list if you haven't customized them:
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',

                #customs
                "wbdap.context_processors.django_app_list_processor",
                "wbdap.context_processors.django_current_app_name_processor",
                "wbdap.context_processors.django_current_app_processor",
                "wbdap.context_processors.get_current_app_type",

                # SOCIAL-AUTH config
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

# TEMPLATE_DEBUG = DEBUG

#List of callables that know how to import navbar from various sources.

# TEMPLATE_LOADERS = (
#     'django.template.loaders.filesystem.Loader',
#     # proje seviyesinde template dizinleri icin
#     'django.template.loaders.app_directories.Loader',
#     #     'django.template.loaders.eggs.Loader',
# )

# Common navbar
# TEMPLATE_DIRS = ('/DATA/Development/Code/PYTHON/Django/WBDAP/navbar',)

#
# TEMPLATE_CONTEXT_PROCESSORS = (
#     "django.contrib.auth.context_processors.auth",
#     "django.core.context_processors.debug",
#     "django.core.context_processors.i18n",
#     "django.core.context_processors.media",
#     "django.core.context_processors.static",
#     "django.core.context_processors.tz",
#     "django.contrib.messages.context_processors.messages",
#     "wbdap.context_processors.django_app_list_processor",
#     "wbdap.context_processors.django_current_app_name_processor",
#     "wbdap.context_processors.django_current_app_processor",
#     "wbdap.context_processors.get_current_app_type",
#
#     # SOCIAL-AUTH config
#     'social.apps.django_app.context_processors.backends',
#     'social.apps.django_app.context_processors.login_redirect',
# )

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
    #     # 'NAME': os.path.join(SITE_ROOT, 'Database') + '/WBDAP.db', # Or path to database file if using sqlite3.
    #     'NAME': os.path.join(SITE_ROOT) + '/WBDAP.db', # Or path to database file if using sqlite3.
    #     'USER': '', # Not used with sqlite3.
    #     'PASSWORD': '', # Not used with sqlite3.
    #     'HOST': '', # Set to empty string for localhost. Not used with sqlite3.
    #     'PORT': '', # Set to empty string for default. Not used with sqlite3.
    #
    #     # 'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
    #     # 'NAME': 'WBDAP', # Or path to database file if using sqlite3.
    #     # 'USER': 'WBDAP', # Not used with sqlite3.
    #     # 'PASSWORD': 'WBDAP', # Not used with sqlite3.
    #     # 'HOST': 'dbserver', # Set to empty string for localhost. Not used with sqlite3.
    #     # 'PORT': '54345', # Set to empty string for default. Not used with sqlite3.
    #
    # },
    #


     'default': {
        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        # 'NAME': os.path.join(SITE_ROOT, 'Database') + '/WBDAP.db', # Or path to database file if using sqlite3.
        'NAME': os.path.join(SITE_ROOT) + '/WBDAP.sqlite3', # Or path to database file if using sqlite3.
        'USER': '', # Not used with sqlite3.
        'PASSWORD': '', # Not used with sqlite3.
        'HOST': '', # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '', # Set to empty string for default. Not used with sqlite3.
    },


     'emlak_db': {
        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        # 'NAME': os.path.join(SITE_ROOT, 'Database') + '/WBDAP.db', # Or path to database file if using sqlite3.
        'NAME': os.path.join(SITE_ROOT) + '/emlak_db.sqlite3', # Or path to database file if using sqlite3.
        'USER': '', # Not used with sqlite3.
        'PASSWORD': '', # Not used with sqlite3.
        'HOST': '', # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '', # Set to empty string for default. Not used with sqlite3.
    },



    #
    #
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': 'wbdap',
    #     'USER': 'wbdap',
    #     'PASSWORD': 'wbdap',
    #     'HOST': 'dbserver',
    #     'PORT': '5432'
    # },


    #'emlakDB': {
    #    'ENGINE': 'django.db.backends.postgresql',
    #    'NAME': 'emlakdata',
    #    'USER': 'emlakadmin',
    #    'PASSWORD': 'emlakadmin',
    #    'HOST': 'dbserver',
    #    'PORT': '5433'
    #}

    # 'businessDB': {
    #     'ENGINE': 'django.db.backends.postgresql_psycopg2',
    #     'NAME': 'businessDB',
    #     'USER': 'businessDBAdmin',
    #     'PASSWORD': 'businessDBAdmin',
    #     'HOST': 'dbserver',
    #     'PORT': '5432'
    # },
}


DATABASE_ROUTERS = ['realEstateRecommender.routers.RealEstateRecommenderRouter','wbdap.default_db_router.DefaultDBRouter']


# MongoDB Database settings
try:

    _MONGODB_USER = ''
    _MONGODB_PASSWD = ''
    _MONGODB_HOST = 'dbserver'
    _MONGODB_NAME = 'WBDAP'
    _MONGODB_DATABASE_HOST = \
        'mongodb://%s/%s' \
        % (_MONGODB_HOST, _MONGODB_NAME)
    # 'mongodb://%s:%s@%s/%s' \
    # % (_MONGODB_USER, _MONGODB_PASSWD, _MONGODB_HOST, _MONGODB_NAME)


    mongoengine.connect(_MONGODB_NAME, host=_MONGODB_DATABASE_HOST)
#    print("Connected to the mongodb")
except Exception as e :
    print(e);
 #   print("Unable to connect to the MongoDB")


# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# In a Windows environment this must be set to your system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = ''

# Asagidaki variable genel olarak deployment safhasinda kullanilmak uzere bulunur.
# Uygulamaya ait tum static dosylarin bir CDN uzerinden sunulmasi amaci ile kullanilir.

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(SITE_ROOT, 'staticServePath')

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(SITE_ROOT, 'static'),
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = '--a%k*pnedb+ky!f8yc08dohbf6xdu^0-85ky^o=y!1gvj4zuw'

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

# the root URLconf module to use
ROOT_URLCONF = 'wbdap.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'wbdap.wsgi.application'

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Uncomment the next line to enable the admin:
    'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    'taggit',
    'rest_framework',
    'crispy_forms',
    # Following are the configurations strings from social-auth-app-django
    # 'social_django'

    # 'projectManagement',
    # 'issueTracker',
    'autofixture',
    'commentApp',

    #begin_applist
    {% for appName in appList %}'{{appName}}',
    {% endfor %}
    #end_applist
]

CRISPY_TEMPLATE_PACK='bootstrap3'


# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # Remove or comment out the followin line prduction phase
    'root': {'level': 'DEBUG'},
    'formatters': {
        'verbose': {
            # Buraya eklenebilecek olan paramterelerin listesine https://docs.python.org/3/library/logging.html#logrecord-attributes
            # adresinden bakabilirsin
            'format': ' ---> %(levelname)s %(asctime)s \n%(pathname)s %(funcName)s \n\t--> %(message)s\n'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        },

    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'wbdap.debug': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}

# Following will hold the list of plugable authentication backend in order
AUTHENTICATION_BACKENDS = {
    #'social_core.backends.open_id.OpenIdAuth',
    #'social_core.backends.google.GoogleOpenId',
    #'social_core.backends.google.GoogleOAuth2',
    #'social_core.backends.google.GoogleOAuth',
    #'social_core.backends.twitter.TwitterOAuth',
    #'social_core.backends.yahoo.YahooOpenId',

    'django.contrib.auth.backends.ModelBackend',
}

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

TEST_RUNNER = 'django.test.runner.DiscoverRunner'


# ---------------------------------------------------------------------
# SOCIAL AUTH SETTINGS : these have been added after the installation of python-social-auth pacakage
# ---------------------------------------------------------------------------

# SOCIAL_AUTH_TWITTER_LOGIN_URL
# SOCIAL_AUTH_LOGIN_URL
# LOGIN_URL


#SOCIAL_AUTH_TWITTER_KEY = 'Ny6Y51x6rsuSsIkQ9d750gFmz'
#SOCIAL_AUTH_TWITTER_SECRET = '9zPAmaUWdMXLZrM8Oi3fYqjafTpPPzJV6V5fa0qCSo4vjxvb9n'
