__author__ = 'ozgur'

import logging
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from django.urls import reverse_lazy
from django.views.generic import ListView, CreateView, DeleteView, UpdateView
from {{applicationName}}.signals.signals import {{applicationName}}_sample_signal
from django.shortcuts import render
{% for model in models %}from {{applicationName}}.models import {{model}}
{% endfor %}

logger = logging.getLogger('django.request')


def landing_page(request):
    return render(request, '{{ applicationName}}/landing.html')


def index_page(request):
    return render(request, '{{applicationName}}/landing.html')


def dashboard(request):
    return render(request, '{{applicationName}}/dashboard.html')


def examplepage1(request):
    return render(request, '{{applicationName}}/dashboard.html')

def examplepage2(request):
    return render(request, '{{applicationName}}/dashboard.html')

def examplepage3(request):
    return render(request, '{{applicationName}}/dashboard.html')


{% for model in models %}

def signal_test(request):
    {{applicationName}}_sample_signal.send(sender={{model|capfirst}}.__class__, test_message="testString",model= {{model}}.objects.get(name='name'))
    return render(request, '{{applicationName}}/dashboard.html')


class {{model|capfirst}}ListView(ListView):
    """
    Lists {{model|capfirst}} typed objects
    """
    model = {{model|capfirst}}
    paginate_by = 10
    context_object_name = 'model_objects'
    template_name = '{{applicationName}}/crud_list.html'

    # Example of overriding get_context_data
    def get_context_data(self, **kwargs):
        context = super({{model|capfirst}}ListView, self).get_context_data(**kwargs)
        print("Context :" + str(context['model_objects']))
#        stats = []
#        for mobj in context['model_objects']:
#            stat = mobj.name
#            stats.append((mobj, stat))
#        context['model_objects'] = stats
        context['model'] = {{model|capfirst}}.__name__
        #Get model fields to be renderened in the table headers
        context['model_fields'] = {{model|capfirst}}._meta.get_fields()
        return context


class {{model|capfirst}}CreateView(CreateView):
    model = {{model|capfirst}}
    fields = '__all__'
    success_url = reverse_lazy('{{applicationName}}:list-{{model}}')
    template_name = '{{applicationName}}/crud_form.html'

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        form.helper = FormHelper()
        form.helper.add_input(Submit('submit', 'Create', css_class='btn-success'))
        return form


class {{model|capfirst}}DeleteView(DeleteView):
    model = {{model|capfirst}}
    success_url = reverse_lazy('{{applicationName}}:list-{{model}}')
    template_name = '{{applicationName}}/crud_delete.html'

class {{model|capfirst}}UpdateView(UpdateView):
    model = {{model|capfirst}}
    fields = '__all__'
    success_url = reverse_lazy('{{applicationName}}:list-{{model}}')
    template_name = '{{applicationName}}/crud_form.html'

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        form.helper = FormHelper()
        form.helper.add_input(Submit('submit', 'Create', css_class='btn-success'))
        return form


{% endfor %}

